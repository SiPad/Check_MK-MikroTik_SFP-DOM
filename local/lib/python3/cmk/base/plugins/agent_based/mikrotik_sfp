#!/usr/bin/env python3
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
from .agent_based_api.v1 import *

from .agent_based_api.v1.type_defs import *

from .utils import (
    temperature,
)

from typing import Dict, List

from cmk.utils import debug
from pprint import pprint

def _isFloat(s):
    try:
        float(s)
        return True
    except ValueError:
        return False


def _isInt(s):
    try:
        int(s)
        return True
    except ValueError:
        return False

UNIT = {
    "c": u"Â°C",
    'v': u"V",
    'a': u"A",
    'w': u"W",
    'dbm': u"dBm",
    '%': u"%",
}

def _render_template(value: float):
    template = "%%%s" % ("d" if isinstance(value, int) else ".1f")
    return template % value


def _render_func(value: float, unit: str) -> str:
    return _render_template(value) + UNIT.get(unit) if UNIT.get(unit) else ''



factory_settings["mikrotik_sfp_default_levels"] = {
    'rx': (-15.0, -22.0),
    'temp': (55.0, 65.0),
}

SNMP_BASE = '.1.3.6.1.4.1.14988.1.1.19.1.1'

OIDs = [
    {'_': 'oid': OID_END , },
    {'if_name': 'oid': '2', 'do_metric': False, },  # SFP interface name
    {'wave_length': 'oid': '5', 'do_metric': False, },  # Wave Length
    {'temp': 'oid': '6', 'do_metric': True, },  # SFP Temp
    {'voltage': 'oid': '7', 'do_metric': True, },  # SFP Supply Voltage
    {'bias': 'oid': '8', 'do_metric': True, },  # SFP Bias Current
    {'tx_power': 'oid': '9', 'do_metric': True, },  # FTP Optical Tx
    {'rx_power': 'oid': '10', 'do_metric': True, },  # SFP Oprical Rx
    {'mtxrOpticalTxFault': 'oid': '4', 'do_metric': False, },  # mtxrOpticalTxFault
    {'vendor': 'oid': '11', 'do_metric': False, }, # Vendor
]

parse_mikrotik_sfp(string_table):

    pprint(string_table)
    interface_list = []
    for m in range(len(string_table)):
        parameters = string_table[m]
        for n in range(len(parameters)):
            divider =  BATT_OIDs[n].get('divider') if BATT_OIDs[n].get('divider') else 1
            if _isInt(parameters[n]) and divider == 1:
                value = int(parameters[n])
            elif _isFloat(parameters[n]):
                value = float(int(parameters[n]) / divider)
            else:
                value = str(parameters[n])
                if (value is None) or (value == ''):
                    value = chr(216)
            parameters[n] = value
    return interface_list


SNMP_DETECT = exists(''.1.3.6.1.4.1.14988.1.1.19.1.1')


register.snmp_section(
    name='mikrotik_sfp'',
    fetch = SNMPTree(
        base = SNMP_BASE,
        oids = [ oid['oid'] for _, oid in OIDs.items()],
    ),
    detect = SNMP_DETECT,
    parse_function = parse_mikrotik_sfp,
)


register.check_plugin(
    name = 'mikrotik_sfp',
    sections=['mikrotik_sfp'],
    service_name = "SFP params - %s",
    discovery_function = discover_mikrotik_sfp,
    check_default_parameters={},
    check_ruleset_name='mikrotik_sfp',
    check_function = check_mikrotik_sfp,
)