#!/usr/bin/env python3
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Mikrotik SFP.SFP+ parameters
# Author: Wojciech RepiÅ„ski wrepinski@gmail.com
#
rx_power_levels = (-20.0, -24.0)
factory_settings["mikrotik_sfp_default_levels"] = {
    'rx': (-15.0, -22.0),
    'temp': (55.0, 65.0),
    #     'rx_power_levels': (-15.0,-22.0),
}


def inventory_mikrotik_sfp(info):
    inventory = []
    for line in info:
        if len(line) > 0:
            sfp = line[1]
            yield (sfp, {})


def check_mikrotik_sfp(item, params, info):

    infotest = ''
    perfdata = []
    sfp = ''
    wave = 0.0
    temp = ''
    volt = 0.0
    bias = 0
    tx = 0.0
    rx = 0.0

    for line in info:
        if line[1] == item:
            if type(params) != dict:
                params = {"rx": params}
            sfp = line[1]
            wave = float(line[2])/100
            temp = line[3]
            volt = float(line[4])/1000.0
            bias = line[5]
            tx = float(line[6])/1000.0
            rx = float(line[7])/1000.0
            infotext = "%s (SFP Name: %s, SFP Wave Length: %.2f nm, SFP Temp: %s st.C, SFP Supply Voltage: %.2f V, SFP Bias Current: %s mA, SFP Tx: %.2f dB, SFP Rx: %.2f dB)" % \
                       (sfp, sfp, wave, temp, volt, bias, tx, rx)

            perfdata.append(('Temp', temp))
            perfdata.append(('Tx_power', tx))
            perfdata.append(('Voltage', volt))
            perfdata.append(('Bias', bias))

            if "rx" in params:
                warn, crit = params["rx"]

                perfdata.append(('Rx_Power', rx, warn, crit))

                if (rx < crit or rx == "" or rx == 0) and (crit != 0):
                    return (2, "CRIT - sftp Rx power Error !!! " + infotext, perfdata)
                if (rx < warn) and (warn != 0):
                    return (1, "WARN - sfp Rx power too low " + infotext, perfdata)
                if rx >= warn:
                    return (0, "OK " + infotext, perfdata)
                if warn == 0 or crit == 0:
                    return (0, "DISABLED WANR and CRIT " + infotext, perfdata)

            else:
                perfdata.append(('Rx_Power', rx))
                return (0, infotext, perfdata)
    return (3, 'UNKNOWN - sfp/sfp+ %s not found' % sfp)


check_info['mikrotik_sfp'] = {
    'check_function': check_mikrotik_sfp,
    'inventory_function': inventory_mikrotik_sfp,
    'service_description': 'SFP params - %s',
    'snmp_info': ('.1.3.6.1.4.1.14988.1.1.19.1.1', [
        OID_END,
        '2',  # SFP interface name
        '5',  # Wave Length
        '6',  # SFP Temp
        '7',  # SFP Supply Voltage
        '8',  # SFP Bias Current
        '9',  # FTP Optical Tx
        '10',  # SFP Oprical Rx
    ]),
    'default_levels_variable': 'mikrotik_sfp_default_levels',
    'group': 'mikrotik_sfp',
    'snmp_scan_function': \
    lambda oid: oid('.1.3.6.1.4.1.14988.1.1.19.1.1.*') is not None,
    'has_perfdata': True,
}